<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
</head>

<body>
<script>
  var socket = io();
  
  /**
  * GOAL
  *
  * The idea for this file is to provide a textbox for sending text commands to the server to test parsing/other server functions.
  * There will be three necessary elemnts: a textbox for inputting commands, a scrolling text log of command input history, and a scrolling
  * log of output from the server.
  *
  **/

  socket.on('updateCommand', function ( data ) {
  		$("#lastCommandDisplay").text(data.command);
      if (data.command == "order for") {
        console.log("orderfor/"+data.args.displayString);
        $("#displayText").text("ORDER FOR "+data.args.displayString);
      }
      if (data.command == "switch") {
        console.log("switch command called");
        $("#panel2").css("border","2px black solid");
      }
      if (data.command == "recipe") {

      }
      if ( data.command == "panel" ) {

      }
      if ( data.command == "create note" ) {
        $("#panelTitle").text(data.args);
      }

      //each panel has its own logic that is triggered by the updateCommand event
      //panels process commands on their own. They do not also poll
      //the db on their own. All requests are handled by the index page logic
      //panels can/should? be their own objects that add their own panel to the DOM
  });
  var responseLog;
  var writeToResponseHistory = function ( data ) {
    responseLog.prepend("<div>command: "+data.command+" arg: "+data.arg+"</div>");

  }

  socket.on('changeState', function (data) {
    $('#currentStateDisplay').text(data);
  });

  socket.on('textCommandResponse', function ( data ) {
    console.log(data);
    writeToResponseHistory(data.response);
  });
 $(document).ready ( function () {
  var commandLog = $('#commandLog');
  responseLog = $('#responseLog');
  var commandInputTextbox = $('#commandInputTextbox');
  var checkKeyPress = function ( event ) {
    if ( event.keyCode == 13 ) {
      sendCommand();
    }
    else {

    }
  }
  commandInputTextbox.keypress(checkKeyPress);
  commandInputTextbox.focus(function(){console.log("hello console");});

  var sendCommand = function (  ) {
    var command = commandInputTextbox.val();
    //io send(command);
    writeToCommandHistory(command);
    //socket.on(send command stuff here)
    socket.emit('textCommand',{ command: command });
    //have response call writeToResponseHistory
    commandInputTextbox.val("");
    commandInputTextbox.focus();
    //io return writeToResponseHistory(result);
  }
  var writeToCommandHistory = function ( data ) {
    commandLog.prepend("<div>"+data+"</div>");
  }

  
} );

</script>
  <% include ../partials/nav.ejs %>
<div class="container-fluid">
  <div class="row">
    <div class="col-sm-12" id="commandInput">
      <input type="text" id="commandInputTextbox" style="width: 100%;">
    </div>
  </div>
  <div class="row">
    <div class="col-sm-6" id="panel1"><h1 id="panelTitle">Command History</h1>
      <div id="commandLog"></div>

    </div>
    <div class="col-sm-6" id="panel2"><h2 id="displayText">Response History</h2>
      <div id="responseLog"></div>
    </div>
  </div>    
</div>


</body>
</html>